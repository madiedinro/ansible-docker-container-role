# Container name
drdc_name: ""

drdc_tmp_dir: "/tmp/srv-{{ drdc_name }}"

# [dir for build/dir with sources]
drdc_dir: ""

drdc_use_dir: "{{ drdc_dir or drdc_tmp_dir }}"

# image source relative path (inside dir contents)
drdc_rel_path: ""

# Override start command
drdc_cmd: ""

# [git repo with images]
drdc_repo: ""

drdc_state: started

# optional dict of records for containers /etc/hosts
drdc_hosts: {}
  # host: 177.17.17.99

# [dir mode]
drdc_dir_mode: 0755

# volumes to mount as list
drdc_volumes: []
# - /data:/data:ro

# purge all networks
drdc_purge_networks: yes

# network mode
drdc_network: bridge

# bridge / host / ....
drdc_net_mode: bridge

# [net to attach]
drdc_networks:
  - {name: '{{drdc_network}}'}

# ports binding
drdc_ports: []
#  - "8080:9000"

# Evn vars dict
drdc_env: {}

# labels dict
drdc_labels: {}

# when restat
drdc_restart_policy: unless-stopped

# mem limit for running container
drdc_memory_limit: 500m

# [name for pull or name for build]
drdc_image: "drdc/{{drdc_name}}-image"

drdc_auto_remove: no

#for pulled images
drdc_force: yes

drdc_git_force: no

# docker_service
# recreate service // smart / never / always
drdc_recreate: never

drdc_restart: no
only_scale: no

drdc_detach: yes

# ingnore cached layers
drdc_nocache: no

# allocate a pseudo-TTY
drdc_tty: no

# keep stdin open after a container is launched
drdc_interactive: no

# run container after build (default yes)
drdc_run_container: yes

# managing mode. native docker methods or use compose
drdc_mode: native # compose

# scale options: dict with key - service name, value - amount
drdc_scale: {}

drdc_pull: "{{ drdc_dir == '' and drdc_repo == '' }}"

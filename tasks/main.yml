---
- fail:
    msg: "Define drdc_name"
  when: "drdc_name is not defined"

- name: "Creating directory if not exists"
  file:
    path: "{{drdc_dir}}"
    state: directory
    mode: "{{drdc_dir_mode}}"
  when: 'drdc_dir is defined'

- block:
    - tempfile:
        state: directory
        suffix: build
      register: build
    - set_fact: drdc_dir={{build.path}}
  when: 'drdc_repo is defined and drdc_dir is not defined'

- name: Cloning {{drdc_name}} service container
  git:
    repo: '{{drdc_repo}}'
    version: HEAD
    force: yes
    accept_hostkey: yes
    dest: '{{drdc_dir}}'
  when: 'drdc_repo is defined'
#    ssh_opts: ' -o StrictHostKeyChecking=no'

- name: Building {{drdc_name}} service image
  docker_image:
    force: yes
    path: '{{drdc_dir|ternary(drdc_dir, drdc_name)}}'
    name: '{{drdc_image}}'
  when: 'drdc_dir is defined'

- name: Creating {{drdc_name}} service container
  docker_container:
    name: '{{drdc_name}}'
    hostname: '{{drdc_name}}'
    recreate: '{{drdc_recreate}}'
    state: started
    pull: '{{drdc_pull}}'
    restart: yes
    restart_policy: '{{drdc_restart_policy}}'
    memory: '{{drdc_memory_limit}}'
    image: '{{drdc_image}}'
    volumes: '{{drdc_volumes}}'
    purge_networks: "{{drdc_purge_networks}}"
    networks: '{{drdc_networks}}'
    ports: '{{drdc_ports}}'
    env: '{{drdc_env}}'
    tty: '{{drdc_tty}}'
    interactive: '{{drdc_interactive}}'
    command: '{{drdc_cmd|default(omit)}}'
